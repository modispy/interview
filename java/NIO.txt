##JAVA NIO
传统的Java 的IO，利用Socket建立服务器，接收客户端连接，一般都是为每一个连接建立一个线程，如果连接数巨大，那么服务器开销也将巨大.

Java NIO
Java NIO的通道类似流，但又有些不同：
既可以从通道中读取数据，又可以写数据到通道。但流的读写通常是单向的。
通道可以异步地读写。
通道中的数据总是要先读到一个Buffer，或者总是要从一个Buffer中写入。
>FileChannel 从文件中读写数据。
>DatagramChannel 能通过UDP读写网络中的数据。
>SocketChannel 能通过TCP读写网络中的数据。
>ServerSocketChannel可以监听新进来的TCP连接，像Web服务器那样。对每一个新进来的连接都会创建一个SocketChannel


##Buffer
使用Buffer读写数据一般遵循以下四个步骤：

1) 写入数据到Buffer
2) 调用flip()方法
3) 从Buffer中读取数据
4) 调用clear()方法或者compact()方法
当向buffer写入数据时，buffer会记录下写了多少数据。一旦要读取数据，需要通过flip()方法将Buffer从写模式切换到读模式。在读模式下，可以读取之前写入到buffer的所有数据。

一旦读完了所有的数据，就需要清空缓冲区，让它可以再次被写入。有两种方式能清空缓冲区：调用clear()或compact()方法。clear()方法会清空整个缓冲区。compact()方法只会清除已经读过的数据。任何未读的数据都被移到缓冲区的起始处，新写入的数据将放到缓冲区未读数据的后面。

###Buffer的分配
要想获得一个Buffer对象首先要进行分配。 每一个Buffer类都有一个allocate方法。
###向Buffer中写数据
写数据到Buffer有两种方式：
1 从Channel写到Buffer。
2 通过Buffer的put()方法写到Buffer里。
###从Buffer中读取数据
从Buffer中读取数据有两种方式：
1 从Buffer读取数据到Channel。
2 使用get()方法从Buffer中读取数据。

#Channel

##FileChannel
FileChannel总是运行在阻塞模式，无法运行在非阻塞模式
1 打开FileChannel
在使用FileChannel之前，必须先打开它。但是，我们无法直接打开一个FileChannel，需要通过使用一个InputStream、OutputStream或RandomAccessFile来获取一个FileChannel实例。

RandomAccessFile aFile = new RandomAccessFile("data/nio-data.txt", "rw");
FileChannel channel - aFile.getChannel();

2 从FileChannel读取数据
Buffer buffer = channel.allocate(1024);
int bytesread = channel.read(buffer);

3 向FileChannel写数据

#Selector
##Selector的创建
Selector selector = Selector.open();
##向Selector注册通道
channel.configureBlocking(false);
SelectionKey key = channel.register(selector,Selectionkey.OP_READ);

与Selector一起使用时，Channel必须处于非阻塞模式下。这意味着不能将FileChannel与Selector一起使用，因为FileChannel不能切换到非阻塞模式。而套接字通道都可以.

注意<b>register()</b>方法的第二个参数。这是一个“interest集合”，意思是在通过Selector监听Channel时对什么事件感兴趣。可以监听四种不同类型的事件：

Connect
Accept
Read
Write



#ServerSocketChannel
Java NIO中的 ServerSocketChannel 是一个可以监听新进来的TCP连接的通道, 就像标准IO中的ServerSocket一样.
        ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();
        serverSocketChannel.socket().bind(new InetSocketAddress(9999));
        
//非阻塞模式下，accept方法会立刻返回
serverSocketChannel.configureBlocking(false);
while (true) {
    SocketChannel socketChannel = serverSocketChannel.accept(); // 监听新进来的链接
    // TODO
    if(socketChannel!=null){
        //TODO
    }
}

// 在非阻塞模式下，accept() 方法会立刻返回，如果还没有新进来的连接,返回的将是null。
// 因此，需要检查返回的SocketChannel是否是null

// close
//serverSocketChannel.close();


#Main difference between JAVA NIO and IO

IO                NIO
面向流            面向缓冲
阻塞IO            非阻塞IO
无                选择器

